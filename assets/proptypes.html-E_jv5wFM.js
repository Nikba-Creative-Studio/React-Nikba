import{_ as n,o as s,c as a,b as e}from"./app-KJPG7_2i.js";const p={},t=e(`<h1 id="proptypes-verificarea-tipurilor" tabindex="-1"><a class="header-anchor" href="#proptypes-verificarea-tipurilor"><span>PropTypes - Verificarea tipurilor</span></a></h1><p>În lecția anterioară, am discutat despre ridicarea stării. Acum să vorbim despre moduri de a crește fiabilitatea aplicațiilor React.</p><p>Pe măsură ce aplicația se dezvoltă și structura componentelor sale devine mai complexă, apare necesitatea de a verifica props-urile pentru a se asigura că acestea corespund tipurilor așteptate. Adică, verificarea tipurilor argumentelor care sunt transmise componentelor.</p><p>Această posibilitate este oferită de biblioteca <code>prop-types</code>, care până de curând făcea parte din biblioteca React. PropTypes oferă o suprapunere flexibilă pentru utilizare în componente.</p><p>În modul de dezvoltare, veți putea verifica <code>props</code> pentru erori și neconcordanțe și le veți putea remedia înainte ca utilizatorii să se confrunte cu ele.</p><h2 id="verificarea-tipurilor-cu-ajutorul-proptypes" tabindex="-1"><a class="header-anchor" href="#verificarea-tipurilor-cu-ajutorul-proptypes"><span>Verificarea tipurilor cu ajutorul PropTypes</span></a></h2><p>Pentru a activa această verificare pe props-urile unei componente, trebuie să utilizați proprietatea specială <code>propTypes</code>:</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&quot;prop-types&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">OrderNumber</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
	<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Numărul comenzii: </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>orderId<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

OrderNumber<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">orderId</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PropTypes poate fi aplicat și componentelor funcționale:</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">OrderNumber</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Numărul comenzii: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>orderId<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

OrderNumber<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">orderId</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pentru aceasta, trebuie să adăugați PropTypes direct la componenta <code>OrderNumber</code>, la fel ca în cazul componentelor de clasă.</p><p><code>PropTypes</code> oferă un set de validatori care pot fi utilizați pentru a verifica tipurile de props-uri transmise componentelor. În exemplul nostru, am utilizat <code>PropTypes.number</code>. Dacă în cod va fi o componentă <code>OrderNumber</code> cu un tip incorect al <code>props.orderId</code>, atunci în consolă va fi afișată o eroare:</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OrderNumber</span></span> <span class="token attr-name">orderId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1138<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// Se transmite un șir de caractere. Acest lucru va duce la o eroare</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OrderNumber</span></span> <span class="token attr-name">orderId</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">1138</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// Se transmite un număr. Eroare nu va fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Verificarea tipurilor cu ajutorul <code>propTypes</code> se efectuează doar în modul de dezvoltare, versiunea de producție a aplicației va ignora erorile. Acest lucru se face din motive de performanță: verificarea tipurilor uneori poate fi o sarcină consumatoare de resurse.</p><h2 id="validatorii-proptypes" tabindex="-1"><a class="header-anchor" href="#validatorii-proptypes"><span>Validatorii PropTypes</span></a></h2><p>Să examinăm exemple de utilizare a validatorilor disponibili:</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span><span class="token punctuation">;</span>

ProductPage<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Verificarea props-ului pentru a corespunde unui anumit tip JS.</span>
  <span class="token literal-property property">optionalString</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>
  <span class="token literal-property property">optionalNumber</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
  <span class="token literal-property property">optionalBool</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">,</span>
  <span class="token literal-property property">optionalArray</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>array<span class="token punctuation">,</span>
  <span class="token literal-property property">optionalObject</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">,</span>
  <span class="token literal-property property">optionalSymbol</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>symbol<span class="token punctuation">,</span>
  <span class="token literal-property property">optionalFunc</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>

  <span class="token comment">// Valoare de orice tip</span>
  <span class="token literal-property property">optionalAny</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>any

  <span class="token comment">// Tot ce poate fi afișat:</span>
  <span class="token comment">// numere, șiruri de caractere, elemente sau tablouri</span>
  <span class="token comment">// (sau fragmente) care conțin aceste tipuri</span>
  <span class="token literal-property property">optionalNode</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>node<span class="token punctuation">,</span>

  <span class="token comment">// Element React</span>
  <span class="token literal-property property">optionalElement</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>element<span class="token punctuation">,</span>

  <span class="token comment">// Tipul elementului React (de exemplu, MyComponent).</span>
  <span class="token literal-property property">optionalElementType</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>elementType<span class="token punctuation">,</span>

  <span class="token comment">// Puteți specifica că props-ul trebuie să fie instanța unei clase</span>
  <span class="token comment">// Pentru acest lucru se utilizează operatorul JS instanceof.</span>
  <span class="token literal-property property">optionalMessage</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">instanceOf</span><span class="token punctuation">(</span>Review<span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Puteți defini restricții pentru valori specifice</span>
  <span class="token comment">// utilizând enumerarea</span>
  <span class="token literal-property property">optionalEnum</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Size&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Brand&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Obiect de unul dintre câteva tipuri</span>
  <span class="token literal-property property">optionalUnion</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>
    PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
    PropTypes<span class="token punctuation">.</span><span class="token function">instanceOf</span><span class="token punctuation">(</span>Review<span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Tablou de obiecte de un anumit tip</span>
  <span class="token literal-property property">optionalArrayOf</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">arrayOf</span><span class="token punctuation">(</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">//</span>

 Obiect cu proprietăți de un anumit tip
  <span class="token literal-property property">optionalObjectOf</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">objectOf</span><span class="token punctuation">(</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Obiect cu o structură specifică</span>
  <span class="token literal-property property">optionalObjectWithShape</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>
    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Dacă există proprietăți nedeclarate în obiect, vor fi apelate avertismente</span>
  <span class="token literal-property property">optionalObjectWithStrictShape</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">exact</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>
    <span class="token literal-property property">quantity</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Puteți adăuga \`isRequired\` la orice tip menționat mai sus,</span>
  <span class="token comment">// pentru a afișa un avertisment</span>
  <span class="token comment">// dacă props-ul nu este transmis</span>
  <span class="token literal-property property">requiredFunc</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>

  <span class="token comment">// Puteți adăuga un validator personalizat.</span>
  <span class="token comment">// Acesta trebuie să returneze un obiect \`Error\` în cazul unei erori de validare.</span>
  <span class="token comment">// Nu utilizați \`console.warn\` sau \`throw\`:</span>
  <span class="token comment">// acest lucru nu va funcționa în interiorul \`oneOfType\`</span>
  <span class="token function-variable function">customProp</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> componentName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">matchme</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token string">&#39;Prop \`&#39;</span> <span class="token operator">+</span> propName <span class="token operator">+</span> <span class="token string">&#39;\` al componentei&#39;</span> <span class="token operator">+</span>
        <span class="token string">&#39; \`&#39;</span> <span class="token operator">+</span> componentName <span class="token operator">+</span> <span class="token string">&#39;\` are o valoare incorectă&#39;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// Puteți specifica validatorul dvs. pentru \`arrayOf\` și \`objectOf\`.</span>
  <span class="token comment">// Acesta trebuie să returneze un obiect Error în cazul unei erori de validare.</span>
  <span class="token comment">// Validatorul va fi apelat pentru fiecare element din tablou</span>
  <span class="token comment">// sau pentru fiecare proprietate a obiectului.</span>
  <span class="token comment">// Primii doi parametri ai validatorului</span>
  <span class="token comment">// sunt tabloul sau obiectul și cheia elementului curent</span>
  <span class="token literal-property property">customArrayProp</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">propValue<span class="token punctuation">,</span> key<span class="token punctuation">,</span> componentName<span class="token punctuation">,</span> location<span class="token punctuation">,</span> propFullName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">matchme</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>propValue<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token string">&#39;Prop \`&#39;</span> <span class="token operator">+</span> propFullName <span class="token operator">+</span> <span class="token string">&#39;\` al componentei&#39;</span> <span class="token operator">+</span>
        <span class="token string">&#39; \`&#39;</span> <span class="token operator">+</span> componentName <span class="token operator">+</span> <span class="token string">&#39;\` are o valoare incorectă&#39;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>După cum ați putut observa, PropTypes permite combinarea validatorilor în structuri complexe.</p><h2 id="limitarea-la-un-singur-component-copil" tabindex="-1"><a class="header-anchor" href="#limitarea-la-un-singur-component-copil"><span>Limitarea la un singur component copil</span></a></h2><p>Cu ajutorul <code>PropTypes.element</code>, puteți specifica că doar un singur element poate fi transmis ca copil:</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&quot;prop-types&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ContainerBlock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
	<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// Acesta trebuie să fie exact un element.</span>
		<span class="token comment">// Altfel, veți vedea un avertisment</span>
		<span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ContainerBlock<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">children</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>element<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Utilizarea PropTypes vă va ajuta să economisiți timp la scrierea codului, iar altor dezvoltatori - să evite erorile atunci când utilizează componentele dvs.</p>`,22),o=[t];function i(c,r){return s(),a("div",null,o)}const u=n(p,[["render",i],["__file","proptypes.html.vue"]]),d=JSON.parse('{"path":"/base/proptypes.html","title":"PropTypes - Verificarea tipurilor","lang":"ro-RO","frontmatter":{"title":"PropTypes - Verificarea tipurilor","lang":"ro-RO","description":"PropTypes - Verificarea tipurilor În lecția anterioară, am discutat despre ridicarea stării. Acum să vorbim despre moduri de a crește fiabilitatea aplicațiilor React. Pe măsură ...","head":[["meta",{"property":"og:url","content":"https://react.md/base/proptypes.html"}],["meta",{"property":"og:site_name","content":"React.js - Curs de Dezvoltare"}],["meta",{"property":"og:title","content":"PropTypes - Verificarea tipurilor"}],["meta",{"property":"og:description","content":"PropTypes - Verificarea tipurilor În lecția anterioară, am discutat despre ridicarea stării. Acum să vorbim despre moduri de a crește fiabilitatea aplicațiilor React. Pe măsură ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ro-RO"}],["meta",{"property":"og:updated_time","content":"2024-03-09T11:18:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T11:18:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PropTypes - Verificarea tipurilor\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-09T11:18:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Verificarea tipurilor cu ajutorul PropTypes","slug":"verificarea-tipurilor-cu-ajutorul-proptypes","link":"#verificarea-tipurilor-cu-ajutorul-proptypes","children":[]},{"level":2,"title":"Validatorii PropTypes","slug":"validatorii-proptypes","link":"#validatorii-proptypes","children":[]},{"level":2,"title":"Limitarea la un singur component copil","slug":"limitarea-la-un-singur-component-copil","link":"#limitarea-la-un-singur-component-copil","children":[]}],"git":{"updatedTime":1709983089000,"contributors":[{"name":"nikba","email":"41567806+Nikba-Creative-Studio@users.noreply.github.com","commits":1}]},"filePathRelative":"base/proptypes.md","autoDesc":true}');export{u as comp,d as data};

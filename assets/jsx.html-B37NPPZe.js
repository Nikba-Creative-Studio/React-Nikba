import{_ as n,o as a,c as s,b as t}from"./app-KJPG7_2i.js";const e={},o=t(`<h1 id="cunoasterea-jsx" tabindex="-1"><a class="header-anchor" href="#cunoasterea-jsx"><span>Cunoașterea JSX</span></a></h1><p>În lecțiile anterioare, v-ați familiarizat în detaliu cu funcția <code>React.createElement</code>. Dar când codul conține multe componente încorporate, devine greu de citit.</p><p>Și, în general, acest mod de descriere a interfeței seamănă mai mult cu o abordare imperativă. Și cum vă amintiți, React este renumit pentru declarativitatea sa. În această lecție, vom examina metoda obișnuită de a descrie interfețele în mod declarativ folosind JSX.</p><p>JSX este o extensie a limbajului JavaScript. Cu ajutorul <code>babel</code>, este transformat în JavaScript standard. În versiunea online a <code>babel</code>, puteți vedea clar cum se fac astfel de modificări. Iată cum poate fi reprezentat:</p><h2 id="paranteze" tabindex="-1"><a class="header-anchor" href="#paranteze"><span>Paranteze</span></a></h2><p>Codul asemănător HTML se amestecă cu &quot;adevăratul&quot; JavaScript. Acest lucru îngreunează citirea:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token constant">M</span>ănâncă și mai multe dintre aceste chifle moi franțuzești<span class="token punctuation">,</span> și bea ceai<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="incorporarea-expresiilor" tabindex="-1"><a class="header-anchor" href="#incorporarea-expresiilor"><span>Încorporarea expresiilor</span></a></h2><p>În exemplu, declarăm o variabilă <code>folderName</code> și o folosim în JSX, încadrând-o în acolade:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> folderName <span class="token operator">=</span> <span class="token string">&quot;Dosarul tuturor dosarelor&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>folderName<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Expresia poate completa conținutul existent:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token string">&quot;Aramishka&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>Salută<span class="token punctuation">,</span> aceasta este prietena mea <span class="token punctuation">{</span>person<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Adesea veți vedea construcții similare:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> onlyGoodNewsClassName <span class="token operator">=</span> <span class="token string">&quot;știri-bune postare doar-bune știri-animale&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token punctuation">{</span>onlyGoodNewsClassName<span class="token punctuation">}</span><span class="token operator">&gt;</span>Blocul știrilor bune<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Proprietatea elementului din acest exemplu este constanta <code>onlyGoodNewsClassName</code>. Utilizarea acestor funcționalități este limitată, în mare parte, doar de imaginația dezvoltatorului.</p><p>JSX permite și apelarea funcțiilor în cadrul marcajului.</p><p>Astfel de funcții trebuie să returneze marcaj sau <code>null</code> și să fie sincrone:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">renderAddress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">street<span class="token punctuation">,</span> house</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Strada <span class="token punctuation">{</span>street<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Casa <span class="token punctuation">{</span>house<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>section<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Locuiesc la adresa<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
		<span class="token punctuation">{</span><span class="token function">renderAddress</span><span class="token punctuation">(</span><span class="token string">&quot;Pușkin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kolotușkin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fragmentele" tabindex="-1"><a class="header-anchor" href="#fragmentele"><span>Fragmentele</span></a></h2><p>Uneori, în JSX se folosește eticheta <code>&lt;React.Fragment&gt;...&lt;/React.Fragment&gt;</code> sau varianta sa mai concisă <code>&lt;&gt;...&lt;/&gt;</code>.</p><p>Aceasta este așa-numitul &quot;fragment&quot; în React:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;myElement&quot;</span><span class="token operator">&gt;</span>Click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;myAnotherElement&quot;</span><span class="token operator">&gt;</span><span class="token constant">A</span> fost clicat<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Regula este că un bloc de cod JSX trebuie să conțină doar un singur element de nivel superior.</p><p>În exemplu, sunt folosite două elemente adiacente: <code>#myElement</code> și <code>#myAnotherElement</code>.</p><p>Pentru ca codul JSX să funcționeze corect, &quot;învelim&quot; aceste două elemente într-un fragment. Fragmentele nu au funcționalitate suplimentară și pot fi percepute ca paranteze „încadrante” în codul JSX. În locul lor, se putea folosi un <code>&amp;#60;div&amp;#62;</code> obișnuit, dar acest lucru ar crea elemente inutile în DOM - o risipă inutilă de resurse, care poate provoca dificultăți suplimentare în stilizare.</p><h2 id="logica-conditionala" tabindex="-1"><a class="header-anchor" href="#logica-conditionala"><span>Logica condițională</span></a></h2><p>Una dintre cele mai frecvente sarcini în construirea unei interfețe dinamice (și în general în programare) este implementarea logicii condiționale.</p><p>În JSX, în cadrul acoladelor, puteți scrie orice expresii JavaScript, deci putem folosi operatorii <code>?:</code> și <code>&amp;&amp;</code>.</p><p>Operatorul ternar <code>?:</code> este o variantă scurtă a <code>if/else</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>isDaylight <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Bună ziua<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Noapte bună<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Uneori, în astfel de construcții se returnează null, în acest caz, nimic nu va ajunge în DOM:</p><p>Operatorul <code>&amp;&amp;</code> (și logic) este o variantă a if, dar fără else - se folosește atunci când este necesar să afișați o parte din marcajul</p><p>JSX doar dacă o anumită condiție este îndeplinită, iar în caz contrar să nu afișați nimic:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>isLunchTime <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Ora prânzului<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ambele operatori pot conține condiții compuse:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>isThursday <span class="token operator">&amp;&amp;</span> wasRaining <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token constant">E</span> timpul să returnez datoria<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>isFrost <span class="token operator">&amp;&amp;</span> isSun <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Zi minunată<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Zi obișnuită<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proprietatile-elementelor" tabindex="-1"><a class="header-anchor" href="#proprietatile-elementelor"><span>Proprietățile elementelor</span></a></h2><p>JSX este foarte asemănător cu HTML, dar există unele diferențe importante pe care va trebui să le rețineți.</p><p>Să începem cu faptul că pentru atribuirea clasei CSS se folosește atributul <code>className</code> în loc de <code>class</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;proletariat&quot;</span><span class="token operator">&gt;</span>
			<span class="token constant">P</span>ăstrează ritmul revoluționar<span class="token operator">!</span> Inamicul neliniștit este aproape<span class="token operator">!</span> Înainte<span class="token punctuation">,</span> înainte<span class="token punctuation">,</span> înainte<span class="token punctuation">,</span>
			Poporul muncitor<span class="token operator">!</span>
		<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;bourgeoisie&quot;</span><span class="token operator">&gt;</span>
			<span class="token constant">M</span>ănâncă ananasuri<span class="token punctuation">,</span> mănâncă cocoșul de munte<span class="token punctuation">,</span> Ziua ta finală vine<span class="token punctuation">,</span> burghezule<span class="token punctuation">.</span>
		<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>De asemenea, în JSX, atributul for al etichetei label este diferit.</p><p>În varianta JSX, trebuie să scrieți <code>htmlFor</code> în loc de <code>for</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&quot;title&quot;</span><span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>input
				id<span class="token operator">=</span><span class="token string">&quot;title&quot;</span>
				type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span>
			<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pentru toate celelalte proprietăți din JSX se folosește stilul <code>camelCase</code> în locul numelor obișnuite ale atributelor HTML:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>onclick -&gt; onClick
tabindex -&gt; tabIndex
fill-rule -&gt; fillRule
overline-thickness -&gt; overlineThickness
stroke-width -&gt; strokeWidth
onmouseover -&gt; onMouseOver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stilurile" tabindex="-1"><a class="header-anchor" href="#stilurile"><span>Stilurile</span></a></h2><p>Una dintre caracteristicile JSX este posibilitatea de a atribui valorile style sub forma obiectelor JavaScript.</p><p>În acest caz, numele proprietăților CSS sunt scrise în camelCase în loc de <code>kebab-case</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">6792</span><span class="token punctuation">,</span>
	<span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">6752</span><span class="token punctuation">,</span>
	<span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">&quot;50%&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;#934838&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span><span class="token operator">&gt;</span>Ce planetă sunt<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Valoarea poate fi atribuită direct fără o variabilă intermediară. Pentru aceasta se folosesc paranteze duble <code>&amp;#0123; &amp;#0123; ... &amp;#0125; &amp;#0125;</code>: parantezele exterioare semnifică substituția valorii, iar cele interioare se referă la obiectul care descrie setul de stiluri:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>div
		style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
			<span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">3475</span><span class="token punctuation">,</span>
			<span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">3472</span><span class="token punctuation">,</span>
			<span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">&quot;50%&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;#d0d5d2&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;#444444&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
		Și eu vreau să fiu o planetă<span class="token operator">!</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un alt avantaj: nu este necesar să specificați dimensiunea pentru valorile în pixeli - React o va face singur.</p><h2 id="tagurile-autoinchise" tabindex="-1"><a class="header-anchor" href="#tagurile-autoinchise"><span>Tagurile autoînchise</span></a></h2><p>Orice tag deschis trebuie să aibă o pereche - un tag închis.</p><p>Dacă un element nu are conținut intern, tagul trebuie să fie autoînchis. Pentru aceasta, se pune o bară oblică <code>/</code> înainte de paranteza sa închisă:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;logo.png&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="comentariile-in-jsx" tabindex="-1"><a class="header-anchor" href="#comentariile-in-jsx"><span>Comentariile în JSX</span></a></h1><p>Ca și în JavaScript obișnuit, în JSX puteți lăsa comentarii.</p><p>Pentru aceasta, se folosește această construcție: <code>{/* Acesta este un element */}</code>.</p><p>Parantezele ajută babel să înțeleagă că aceasta nu este o simplă șir care trebuie plasată în DOM, ci un comentariu.</p><p>În cod, acest lucru ar putea arăta astfel:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
		<span class="token punctuation">{</span><span class="token comment">/* Acesta este un comentariu pentru eticheta label */</span><span class="token punctuation">}</span>
		<span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&quot;title&quot;</span><span class="token operator">&gt;</span>
			<span class="token punctuation">{</span><span class="token comment">/*
                Acest comentariu este pe mai multe linii,
                în el puteți scrie un indiciu pentru colegi.
            */</span><span class="token punctuation">}</span>
			<span class="token operator">&lt;</span>input
				id<span class="token operator">=</span><span class="token string">&quot;title&quot;</span>
				type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span>
			<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>În această lecție, v-ați familiarizat cu JSX.</p><p>Această extensie a limbajului JavaScript vă permite să descrieți în mod declarativ interfața utilizatorului.</p><p>React se bazează pe principiul că logica de redare este strâns legată de restul logicii interfeței utilizatorului: gestionarea evenimentelor, modificarea stării și pregătirea datelor pentru afișare.</p><p>JSX este menit să corespundă acestui principiu în toate aspectele. Acestea nu sunt singurele moduri de a utiliza JSX - veți afla mai multe pe măsură ce avansați în curs.</p>`,67),p=[o];function c(i,l){return a(),s("div",null,p)}const u=n(e,[["render",c],["__file","jsx.html.vue"]]),d=JSON.parse('{"path":"/base/jsx.html","title":"Ce este JSX","lang":"ro-RO","frontmatter":{"title":"Ce este JSX","lang":"ro-RO","description":"Cunoașterea JSX În lecțiile anterioare, v-ați familiarizat în detaliu cu funcția React.createElement. Dar când codul conține multe componente încorporate, devine greu de citit. ...","head":[["meta",{"property":"og:url","content":"https://react.md/base/jsx.html"}],["meta",{"property":"og:site_name","content":"React.js - Curs de Dezvoltare"}],["meta",{"property":"og:title","content":"Ce este JSX"}],["meta",{"property":"og:description","content":"Cunoașterea JSX În lecțiile anterioare, v-ați familiarizat în detaliu cu funcția React.createElement. Dar când codul conține multe componente încorporate, devine greu de citit. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ro-RO"}],["meta",{"property":"og:updated_time","content":"2024-03-09T11:18:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T11:18:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ce este JSX\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-09T11:18:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Paranteze","slug":"paranteze","link":"#paranteze","children":[]},{"level":2,"title":"Încorporarea expresiilor","slug":"incorporarea-expresiilor","link":"#incorporarea-expresiilor","children":[]},{"level":2,"title":"Fragmentele","slug":"fragmentele","link":"#fragmentele","children":[]},{"level":2,"title":"Logica condițională","slug":"logica-conditionala","link":"#logica-conditionala","children":[]},{"level":2,"title":"Proprietățile elementelor","slug":"proprietatile-elementelor","link":"#proprietatile-elementelor","children":[]},{"level":2,"title":"Stilurile","slug":"stilurile","link":"#stilurile","children":[]},{"level":2,"title":"Tagurile autoînchise","slug":"tagurile-autoinchise","link":"#tagurile-autoinchise","children":[]}],"git":{"updatedTime":1709983089000,"contributors":[{"name":"Bargan Nicolai","email":"41567806+Nikba-Creative-Studio@users.noreply.github.com","commits":1},{"name":"nikba","email":"41567806+Nikba-Creative-Studio@users.noreply.github.com","commits":1}]},"filePathRelative":"base/jsx.md","autoDesc":true}');export{u as comp,d as data};

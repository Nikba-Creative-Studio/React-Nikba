import{_ as a,o as n,c as e,b as t}from"./app-KJPG7_2i.js";const s="/assets/state-BjqQxH6D.png",o={},p=t('<h1 id="starea-interna-a-componentelor" tabindex="-1"><a class="header-anchor" href="#starea-interna-a-componentelor"><span>Starea internă a componentelor</span></a></h1><p>În lecțiile anterioare, ați înțeles componentele și prop-urile lor în React. Deja știți că puteți influența logica de funcționare și afișarea componentelor prin intermediul prop-urilor. În React, există încă un instrument pentru a influența componenta - starea internă a componentei.</p><p>Datorită stării, componentele pot reacționa la acțiunile utilizatorului, răspunsurile serverului și alte evenimente, fără a încălca principiul de puritate al componentelor. Dar să începem cu noțiunile de bază - vă vom explica ce este starea internă a componentelor în React.</p><h2 id="ce-este-starea-interna" tabindex="-1"><a class="header-anchor" href="#ce-este-starea-interna"><span>Ce este starea internă</span></a></h2><p>Starea ne înconjoară în viața de zi cu zi: computerul este <strong>pornit</strong>, ora din zi este <strong>seara</strong>, muzica este <strong>în redare</strong>. În interfețele utilizator, la fel ca la componente și la aplicațiile create cu ajutorul lor, de asemenea, poate exista o stare: meniul este <strong>desfășurat</strong>, tema întunecată este <strong>activată</strong>, utilizatorul este <strong>autentificat</strong>, datele sunt <strong>încărcate</strong>.</p><p>Într-un magazin online, lista de produse, conținutul coșului, prezența comenzilor active, filtrele aplicate și codul promoțional - toate acestea sunt stări.</p><p><img src="'+s+`" alt="image"></p><p>Ea se poate schimba în funcție de acțiunile utilizatorului și de procesele interne ale aplicației, iar aceste schimbări influențează logica de funcționare și afișarea interfeței utilizatorului. Biblioteca React oferă un set puternic de instrumente pentru gestionarea stării interne a componentelor și construirea de interfețe utilizator dinamice.</p><h2 id="starea-in-componentele-react" tabindex="-1"><a class="header-anchor" href="#starea-in-componentele-react"><span>Starea în componentele React</span></a></h2><p>În React, starea internă a unei componente de clasă este stabilită prin proprietatea <code>state</code>. Componenta se re-renderează atunci când <code>state</code> se schimbă. Starea este foarte asemănătoare cu prop-urile, cu excepția faptului că este stabilită în interiorul componentei, nu vine din exterior. Mai târziu vom arăta cum <code>state</code> și <code>props</code> lucrează împreună.</p><p>Iată un exemplu de componentă cu stare internă:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ThemeToggle</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
	state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&quot;light&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>
			<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
				<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Theme <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span> is enabled<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Componenta conține o stare: <code>{ theme: &quot;light&quot; }</code>. Bazându-ne pe această stare, putem crea lucruri uimitoare, de exemplu, putem adăuga o temă întunecată în aplicație:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ThemeToggle</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
	state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&quot;light&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>
			<span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">&quot;light&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;th-light&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;th-dark&quot;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
				<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Theme <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span> is enabled<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>În acest exemplu, se aplică o clasă diferită elementului <code>div</code> în funcție de valoarea <code>this.state.theme</code>. Iar această clasă, la rândul său, influențează schema de culori.</p><h2 id="ierarhia-si-forma-starii-in-componentele-react" tabindex="-1"><a class="header-anchor" href="#ierarhia-si-forma-starii-in-componentele-react"><span>Ierarhia și forma stării în componentele React</span></a></h2><p>La fel ca <code>props</code>, <code>state</code> poate fi ierarhic și poate lua orice formă:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>state <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&quot;light&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">posts</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;News 1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;News 2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">commentsEnabled</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Huckleberry Finn&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">uuid</span><span class="token operator">:</span> <span class="token string">&quot;123e4567-e89b-12d3-a456-426655440000&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">lastActive</span><span class="token operator">:</span> <span class="token number">1614498769824</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>În acest exemplu, în <code>state</code> se păstrează informații despre tema aplicată în aplicație și utilizatorul curent - numele său, identificatorul, timpul ultimei activități, setarea disponibilității comentariilor, lista de știri. Obiectul <code>state</code> poate fi folosit pentru a descrie orice „model de date” pe care îl permite imaginația.</p><p>În lecția următoare, vom discuta cum să influențăm această stare și vom examina cum <code>state</code> și <code>props</code> lucrează împreună.</p>`,20),i=[p];function r(c,l){return n(),e("div",null,i)}const d=a(o,[["render",r],["__file","state.html.vue"]]),m=JSON.parse('{"path":"/base/state.html","title":"Starea internă a componentelor","lang":"ro-RO","frontmatter":{"title":"Starea internă a componentelor","lang":"ro-RO","description":"Starea internă a componentelor În lecțiile anterioare, ați înțeles componentele și prop-urile lor în React. Deja știți că puteți influența logica de funcționare și afișarea comp...","head":[["meta",{"property":"og:url","content":"https://react.md/base/state.html"}],["meta",{"property":"og:site_name","content":"React.js - Curs de Dezvoltare"}],["meta",{"property":"og:title","content":"Starea internă a componentelor"}],["meta",{"property":"og:description","content":"Starea internă a componentelor În lecțiile anterioare, ați înțeles componentele și prop-urile lor în React. Deja știți că puteți influența logica de funcționare și afișarea comp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ro-RO"}],["meta",{"property":"og:updated_time","content":"2024-03-09T11:18:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T11:18:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Starea internă a componentelor\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-09T11:18:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Ce este starea internă","slug":"ce-este-starea-interna","link":"#ce-este-starea-interna","children":[]},{"level":2,"title":"Starea în componentele React","slug":"starea-in-componentele-react","link":"#starea-in-componentele-react","children":[]},{"level":2,"title":"Ierarhia și forma stării în componentele React","slug":"ierarhia-si-forma-starii-in-componentele-react","link":"#ierarhia-si-forma-starii-in-componentele-react","children":[]}],"git":{"updatedTime":1709983089000,"contributors":[{"name":"nikba","email":"41567806+Nikba-Creative-Studio@users.noreply.github.com","commits":1}]},"filePathRelative":"base/state.md","autoDesc":true}');export{d as comp,m as data};

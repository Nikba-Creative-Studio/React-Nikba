import{_ as n,o as a,c as s,b as e}from"./app-KJPG7_2i.js";const t={},o=e(`<h1 id="componente-de-clasa-in-detalii" tabindex="-1"><a class="header-anchor" href="#componente-de-clasa-in-detalii"><span>Componente de clasă în detalii</span></a></h1><p>În lecția anterioară, am discutat despre randarea listelor în React și prop-ul <code>key</code> în elementele JSX. În această lecție, vom analiza în detaliu componentele de clasă, precum și vom explora funcționalitățile suplimentare ale <code>React.Component</code>.</p><p>În acest curs, vom folosi React versiunea 17 și mai nouă. Această versiune are un set extins de instrumente, dar nu a fost întotdeauna așa. Până la versiunea React 16.8, componentele erau împărțite în:</p><ul><li>Componente cu stare internă. Acestea sunt denumite și componente stateful sau „inteligente”. Sunt descrise folosind clase.</li><li>Componente fără stare internă - stateless sau „proste”. Acest tip este descris folosind funcții.</li></ul><p>Începând cu versiunea 16.8, această distincție a pierdut semnificația: și componentele „proste”, la fel ca și cele „inteligente”, au dobândit posibilitatea de a avea o stare internă și de a implementa o logică complexă de funcționare. Dar, în lumea reală, există mult cod scris pe baza claselor, care trebuie de asemenea întreținut și dezvoltat. Să începem prin a învăța cum să creăm și să inițializăm componente - să studiem constructorul.</p><h2 id="constructorul-componentei-constructor-props" tabindex="-1"><a class="header-anchor" href="#constructorul-componentei-constructor-props"><span>Constructorul componentei: <code>constructor(props)</code></span></a></h2><p>Constructorul este o metodă specială a claselor, care servește la crearea și inițializarea obiectelor. În React, aceste obiecte sunt componentele. Să examinăm un exemplu de utilizare a constructorului într-un component React:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SayHi</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span> <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>showGreeting <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showGreeting</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">showGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">&#39;dark&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;Btn-dark&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Btn-light&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>button 
                className<span class="token operator">=</span><span class="token punctuation">{</span>className<span class="token punctuation">}</span>
                onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>showGreeting<span class="token punctuation">}</span><span class="token operator">&gt;</span>Apasă pe mine
            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Să analizăm acest exemplu în detaliu:</p><p>Primul lucru pe care trebuie să-l faceți când utilizați constructorul este să apelați <code>super(props)</code>. Dacă nu faceți acest lucru, pot apărea erori, deoarece <code>this.props</code> nu va fi definit. În acest exemplu, componenta <code>SayHi</code> apelează în constructorul său cuvântul cheie <code>super</code>, care invocă constructorul clasei părinte - <code>React.Component</code>.</p><p>Apoi, în constructor, trebuie să atribuiți o valoare pentru <code>this.state</code>. Constructorul este singurul loc unde puteți specifica explicit valoarea pentru <code>this.state</code>. În alte părți ale componentei, va trebui să utilizați metoda deja cunoscută <code>this.setState</code>.</p><p>În final, în constructorul componentei <code>SayHi</code>, trebuie să legați handler-ul evenimentului - <code>this.showGreeting</code>. Pentru a evita utilizarea construcției <code>bind(this)</code>, puteți descrie metodele sub formă de funcții săgeată - astfel, contextul de execuție va fi automat preluat din clasă.</p><p>Ce nu ar trebui să faceți în constructor:</p><ol><li><p>Abonați-vă la evenimente și gestionați efectele secundare:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Nu faceți asta</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Despre cum să faceți acest lucru corect, vom discuta în lecția următoare.</p></li><li><p>Atribuiți <code>this.state</code> din <code>props</code>. Componenta va înceta să reacționeze la schimbările <code>props</code> și nu va afișa markup-ul actualizat:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Nu faceți asta</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> props<span class="token punctuation">.</span>name <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dacă aveți nevoie de <code>props</code> ca stare internă a componentei, utilizați metoda <code>getDerivedStateFromProps</code>.</p></li></ol><p>Puteți să nu folosiți constructorul într-o componentă React dacă nu legați metodele. Amintiți-vă de acest lucru, deoarece în producție există mult cod scris pe baza claselor.</p><h2 id="prop-uri-implicite-defaultprops" tabindex="-1"><a class="header-anchor" href="#prop-uri-implicite-defaultprops"><span>Prop-uri implicite: <code>defaultProps</code></span></a></h2><p>În cazul în care o componentă ar trebui să aibă prop-uri implicite, puteți utiliza proprietatea <code>defaultProps</code>. Valorile din această proprietate vor fi utilizate pentru prop-urile nedefinite (<code>undefined</code>), dar nu pentru prop-urile cu valoarea <code>null</code>. De exemplu:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ImageContainer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

ImageContainer<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>În cazul în care <code>props.background</code> nu este transmis, implicit va fi utilizată valoarea din <code>defaultProps</code>, adică <code>&#39;black&#39;</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>ImageContainer <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">;</span> <span class="token comment">// props.background = &#39;black&#39;</span>
  <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dacă <code>props.background</code> are valoarea <code>null</code>, aceasta va rămâne <code>null</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>ImageContainer background<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">;</span> <span class="token comment">// props.background = null</span>
  <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="control-manual-al-randarii-forceupdate" tabindex="-1"><a class="header-anchor" href="#control-manual-al-randarii-forceupdate"><span>Control manual al randării: <code>forceUpdate()</code></span></a></h2><p>Implicit, atunci când starea componentei sau prop-urile se schimbă, are loc o nouă randare. Dacă afișarea componentei depinde de alte date, puteți declanșa o nouă randare utilizând metoda <code>forceUpdate</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ChartContainer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">const</span> <span class="token function-variable function">onMyCustomEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La apelul metodei <code>forceUpdate</code>, puteți transmite o funcție callback.</p><p>În lecția următoare, vom explora ciclurile de viață ale componentei și vom învăța cum să obținem date de la server în componentele React.</p>`,27),p=[o];function c(i,l){return a(),s("div",null,p)}const u=n(t,[["render",c],["__file","classcomponent.html.vue"]]),d=JSON.parse('{"path":"/base/classcomponent.html","title":"Componente de clasă în detalii","lang":"ro-RO","frontmatter":{"title":"Componente de clasă în detalii","lang":"ro-RO","description":"Componente de clasă în detalii În lecția anterioară, am discutat despre randarea listelor în React și prop-ul key în elementele JSX. În această lecție, vom analiza în detaliu co...","head":[["meta",{"property":"og:url","content":"https://react.md/base/classcomponent.html"}],["meta",{"property":"og:site_name","content":"React.js - Curs de Dezvoltare"}],["meta",{"property":"og:title","content":"Componente de clasă în detalii"}],["meta",{"property":"og:description","content":"Componente de clasă în detalii În lecția anterioară, am discutat despre randarea listelor în React și prop-ul key în elementele JSX. În această lecție, vom analiza în detaliu co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ro-RO"}],["meta",{"property":"og:updated_time","content":"2024-03-09T11:18:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T11:18:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Componente de clasă în detalii\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-09T11:18:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Constructorul componentei: constructor(props)","slug":"constructorul-componentei-constructor-props","link":"#constructorul-componentei-constructor-props","children":[]},{"level":2,"title":"Prop-uri implicite: defaultProps","slug":"prop-uri-implicite-defaultprops","link":"#prop-uri-implicite-defaultprops","children":[]},{"level":2,"title":"Control manual al randării: forceUpdate()","slug":"control-manual-al-randarii-forceupdate","link":"#control-manual-al-randarii-forceupdate","children":[]}],"git":{"updatedTime":1709983089000,"contributors":[{"name":"nikba","email":"41567806+Nikba-Creative-Studio@users.noreply.github.com","commits":1}]},"filePathRelative":"base/classcomponent.md","autoDesc":true}');export{u as comp,d as data};
